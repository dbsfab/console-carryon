{"ast":null,"code":"import { signal } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let RuntimeConfigService = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class RuntimeConfigService {\n    constructor(http) {\n      this.http = http;\n      this.configSignal = signal({\n        apiBaseUrl: '/api',\n        wsBaseUrl: 'ws://localhost:8000/ws'\n      });\n    }\n    get apiBaseUrl() {\n      return this.configSignal().apiBaseUrl;\n    }\n    get wsBaseUrl() {\n      return this.configSignal().wsBaseUrl;\n    }\n    load() {\n      return this.http.get('assets/config.json').toPromise().then(cfg => this.configSignal.set(cfg));\n    }\n    static #_ = (() => _staticBlock = () => (this.ɵfac = function RuntimeConfigService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || RuntimeConfigService)(i0.ɵɵinject(i1.HttpClient));\n    }, this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RuntimeConfigService,\n      factory: RuntimeConfigService.ɵfac,\n      providedIn: 'root'\n    })))();\n  }\n  _staticBlock();\n  return RuntimeConfigService;\n})();\nexport function initRuntimeConfig(cfg) {\n  return () => cfg.load();\n}","map":{"version":3,"names":["signal","RuntimeConfigService","_staticBlock","constructor","http","configSignal","apiBaseUrl","wsBaseUrl","load","get","toPromise","then","cfg","set","_","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn","initRuntimeConfig"],"sources":["/workspace/ks-console-ng/src/app/core/config/runtime-config.service.ts"],"sourcesContent":["import { Injectable, signal } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface RuntimeConfig { apiBaseUrl: string; wsBaseUrl: string; }\n\n@Injectable({ providedIn: 'root' })\nexport class RuntimeConfigService {\n\tprivate readonly configSignal = signal<RuntimeConfig>({ apiBaseUrl: '/api', wsBaseUrl: 'ws://localhost:8000/ws' });\n\tconstructor(private readonly http: HttpClient) {}\n\tget apiBaseUrl() { return this.configSignal().apiBaseUrl; }\n\tget wsBaseUrl() { return this.configSignal().wsBaseUrl; }\n\tload() { return this.http.get<RuntimeConfig>('assets/config.json').toPromise().then(cfg => this.configSignal.set(cfg)); }\n}\n\nexport function initRuntimeConfig(cfg: RuntimeConfigService) { return () => cfg.load(); }"],"mappings":"AAAA,SAAqBA,MAAM,QAAQ,eAAe;;;AAMlD,WAAaC,oBAAoB;EAAA,IAAAC,YAAA;EAA3B,MAAOD,oBAAoB;IAEhCE,YAA6BC,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;MADhB,KAAAC,YAAY,GAAGL,MAAM,CAAgB;QAAEM,UAAU,EAAE,MAAM;QAAEC,SAAS,EAAE;MAAwB,CAAE,CAAC;IAClE;IAChD,IAAID,UAAUA,CAAA;MAAK,OAAO,IAAI,CAACD,YAAY,EAAE,CAACC,UAAU;IAAE;IAC1D,IAAIC,SAASA,CAAA;MAAK,OAAO,IAAI,CAACF,YAAY,EAAE,CAACE,SAAS;IAAE;IACxDC,IAAIA,CAAA;MAAK,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAgB,oBAAoB,CAAC,CAACC,SAAS,EAAE,CAACC,IAAI,CAACC,GAAG,IAAI,IAAI,CAACP,YAAY,CAACQ,GAAG,CAACD,GAAG,CAAC,CAAC;IAAE;IAAC,QAAAE,CAAA,UAAAZ,YAAA,GAAAA,CAAA,M;uCAL7GD,oBAAoB,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA,G;aAApBjB,oBAAoB;MAAAkB,OAAA,EAApBlB,oBAAoB,CAAAmB,IAAA;MAAAC,UAAA,EADP;IAAM;;;SACnBpB,oBAAoB;AAAA;AAQjC,OAAM,SAAUqB,iBAAiBA,CAACV,GAAyB;EAAI,OAAO,MAAMA,GAAG,CAACJ,IAAI,EAAE;AAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}