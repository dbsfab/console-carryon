{"ast":null,"code":"import { inject, signal } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatListModule } from '@angular/material/list';\nimport { ClusterService } from '../../shared/services/cluster.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/material/button\";\nimport * as i3 from \"@angular/material/list\";\nfunction DashboardComponent_mat_list_item_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list-item\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const c_r1 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(c_r1.name);\n  }\n}\nexport let DashboardComponent = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class DashboardComponent {\n    constructor() {\n      this.clusterService = inject(ClusterService);\n      this.clusters = signal([]);\n    }\n    ngOnInit() {\n      this.refresh();\n    }\n    refresh() {\n      this.clusterService.listClusters().subscribe(data => this.clusters.set(data));\n    }\n    static #_ = (() => _staticBlock = () => (this.ɵfac = function DashboardComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || DashboardComponent)();\n    }, this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DashboardComponent,\n      selectors: [[\"app-dashboard\"]],\n      decls: 6,\n      vars: 1,\n      consts: [[\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"], [\"role\", \"list\"], [\"role\", \"listitem\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"listitem\"]],\n      template: function DashboardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h1\");\n          i0.ɵɵtext(1, \"Dashboard\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"button\", 0);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_2_listener() {\n            return ctx.refresh();\n          });\n          i0.ɵɵtext(3, \"Refresh\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"mat-list\", 1);\n          i0.ɵɵtemplate(5, DashboardComponent_mat_list_item_5_Template, 2, 1, \"mat-list-item\", 2);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngForOf\", ctx.clusters());\n        }\n      },\n      dependencies: [CommonModule, i1.NgForOf, MatButtonModule, i2.MatButton, MatListModule, i3.MatList, i3.MatListItem],\n      encapsulation: 2\n    })))();\n  }\n  _staticBlock();\n  return DashboardComponent;\n})();","map":{"version":3,"names":["inject","signal","CommonModule","MatButtonModule","MatListModule","ClusterService","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","c_r1","name","DashboardComponent","_staticBlock","constructor","clusterService","clusters","ngOnInit","refresh","listClusters","subscribe","data","set","_","selectors","decls","vars","consts","template","DashboardComponent_Template","rf","ctx","ɵɵlistener","DashboardComponent_Template_button_click_2_listener","ɵɵtemplate","DashboardComponent_mat_list_item_5_Template","ɵɵproperty","i1","NgForOf","i2","MatButton","i3","MatList","MatListItem","encapsulation"],"sources":["/workspace/ks-console-ng/src/app/features/dashboard/dashboard.component.ts"],"sourcesContent":["import { Component, inject, signal } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatListModule } from '@angular/material/list';\nimport { ClusterService, Cluster } from '../../shared/services/cluster.service';\n\n@Component({\n\tselector: 'app-dashboard',\n\tstandalone: true,\n\timports: [CommonModule, MatButtonModule, MatListModule],\n\ttemplate: `\n\t\t<h1>Dashboard</h1>\n\t\t<button mat-raised-button color=\"primary\" (click)=\"refresh()\">Refresh</button>\n\t\t<mat-list role=\"list\">\n\t\t\t<mat-list-item role=\"listitem\" *ngFor=\"let c of clusters()\">{{ c.name }}</mat-list-item>\n\t\t</mat-list>\n\t`\n})\nexport class DashboardComponent {\n\tprivate readonly clusterService = inject(ClusterService);\n\tclusters = signal<Cluster[]>([]);\n\tngOnInit() { this.refresh(); }\n\trefresh() { this.clusterService.listClusters().subscribe(data => this.clusters.set(data)); }\n}"],"mappings":"AAAA,SAAoBA,MAAM,EAAEC,MAAM,QAAQ,eAAe;AACzD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,cAAc,QAAiB,uCAAuC;;;;;;;IAU5EC,EAAA,CAAAC,cAAA,uBAA4D;IAAAD,EAAA,CAAAE,MAAA,GAAY;IAAAF,EAAA,CAAAG,YAAA,EAAgB;;;;IAA5BH,EAAA,CAAAI,SAAA,EAAY;IAAZJ,EAAA,CAAAK,iBAAA,CAAAC,IAAA,CAAAC,IAAA,CAAY;;;AAI3E,WAAaC,kBAAkB;EAAA,IAAAC,YAAA;EAAzB,MAAOD,kBAAkB;IAZ/BE,YAAA;MAakB,KAAAC,cAAc,GAAGjB,MAAM,CAACK,cAAc,CAAC;MACxD,KAAAa,QAAQ,GAAGjB,MAAM,CAAY,EAAE,CAAC;;IAChCkB,QAAQA,CAAA;MAAK,IAAI,CAACC,OAAO,EAAE;IAAE;IAC7BA,OAAOA,CAAA;MAAK,IAAI,CAACH,cAAc,CAACI,YAAY,EAAE,CAACC,SAAS,CAACC,IAAI,IAAI,IAAI,CAACL,QAAQ,CAACM,GAAG,CAACD,IAAI,CAAC,CAAC;IAAE;IAAC,QAAAE,CAAA,UAAAV,YAAA,GAAAA,CAAA,M;uCAJhFD,kBAAkB;IAAA,G;YAAlBA,kBAAkB;MAAAY,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,4BAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UAP7B1B,EAAA,CAAAC,cAAA,SAAI;UAAAD,EAAA,CAAAE,MAAA,gBAAS;UAAAF,EAAA,CAAAG,YAAA,EAAK;UAClBH,EAAA,CAAAC,cAAA,gBAA8D;UAApBD,EAAA,CAAA4B,UAAA,mBAAAC,oDAAA;YAAA,OAASF,GAAA,CAAAb,OAAA,EAAS;UAAA,EAAC;UAACd,EAAA,CAAAE,MAAA,cAAO;UAAAF,EAAA,CAAAG,YAAA,EAAS;UAC9EH,EAAA,CAAAC,cAAA,kBAAsB;UACrBD,EAAA,CAAA8B,UAAA,IAAAC,2CAAA,2BAA4D;UAC7D/B,EAAA,CAAAG,YAAA,EAAW;;;UADmCH,EAAA,CAAAI,SAAA,GAAa;UAAbJ,EAAA,CAAAgC,UAAA,YAAAL,GAAA,CAAAf,QAAA,GAAa;;;qBALlDhB,YAAY,EAAAqC,EAAA,CAAAC,OAAA,EAAErC,eAAe,EAAAsC,EAAA,CAAAC,SAAA,EAAEtC,aAAa,EAAAuC,EAAA,CAAAC,OAAA,EAAAD,EAAA,CAAAE,WAAA;MAAAC,aAAA;IAAA;;;SAS1ChC,kBAAkB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}